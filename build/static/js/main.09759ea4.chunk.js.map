{"version":3,"sources":["components/Search/Search.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["SearchPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleTogglerClick","setState","collapsed","state","handleNavbarClick","e","handleChange","defineProperty","target","name","value","toLowerCase","Axios","get","findData","data","company","asset","openUrl","console","log","notify","haddleSubmit","bind","assertThisInitialized","","roots","7 series 767","6 series 650","type","toast","info","autoClose","success","position","warn","error","react_default","a","createElement","mdbreact_esm","md","color","className","dark","expand","onClick","BrowserRouter","isOpen","navbar","right","placeholder","aria-label","onChange","outline","size","iframe","url","width","height","scrolling","allowFullScreen","Component","NotificationsPage","react","Search","App","Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPA0IeA,cAjIX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA+CdQ,mBAAqB,WACnBP,EAAKQ,SAAS,CACZC,WAAYT,EAAKU,MAAMD,aAlDJT,EAsDvBW,kBAAoB,SAACC,GACnBZ,EAAKQ,SAAS,CACZC,WAAW,KAxDQT,EA4DvBa,aAAe,SAACD,GACZZ,EAAKQ,SAALP,OAAAa,EAAA,EAAAb,CAAA,GACGW,EAAEG,OAAOC,KAAQJ,EAAEG,OAAOE,MAAMC,gBAGnCC,IAAMC,OAjEapB,EAsEvBqB,SAAW,WAC8C,qBAAzCrB,EAAKU,MAAMY,KAAKtB,EAAKU,MAAMa,SACqC,qBAA3DvB,EAAKU,MAAMY,KAAKtB,EAAKU,MAAMa,SAASvB,EAAKU,MAAMc,OAE5DxB,EAAKQ,SAAS,CACViB,QAAUzB,EAAKU,MAAMY,KAAKtB,EAAKU,MAAMa,SAASvB,EAAKU,MAAMc,SAKzDE,QAAQC,IAAI,oBAIhBD,QAAQC,IAAI,sBACZ3B,EAAK4B,OAAO,aArFG5B,EAyFvB6B,aAAe,SAACjB,GAIZZ,EAAKqB,YA3FDrB,EAAKa,aAAeb,EAAKa,aAAaiB,KAAlB7B,OAAA8B,EAAA,EAAA9B,QAAA8B,EAAA,EAAA9B,CAAAD,KACpBA,EAAK6B,aAAe7B,EAAK6B,aAAaC,KAAlB7B,OAAA8B,EAAA,EAAA9B,QAAA8B,EAAA,EAAA9B,CAAAD,KAEpBA,EAAKU,MAAQ,CACTD,WAAW,EACXe,MAAQ,GACRD,QAAU,GACVE,QAAU,kCACVH,KAAO,CACFU,GAAK,GACLC,MAAQ,CACDD,GAAK,kCACLE,eAAkB,mEAClBC,eAAkB,sEAfnBnC,sEAuBZoC,GACH,OAAO,WACL,OAAQA,GACN,IAAK,OACHC,IAAMC,KAAK,eAAgB,CACzBC,UAAW,MAEb,MACF,IAAK,UACHF,IAAMG,QAAQ,kBAAmB,CAC/BC,SAAU,cAEZ,MACF,IAAK,UACHJ,IAAMK,KAAK,mBACX,MACF,IAAK,QACHL,IAAMM,MAAM,oDAyDxB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,GAAG,MACTJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWE,MAAM,cAAcC,UAAU,sBAAsBC,MAAI,EAACC,OAAO,MACzER,EAAAC,EAAAC,cAACC,EAAA,EAAD,wBACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAkBM,QAASlD,KAAKI,qBAChCqC,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaQ,OAAQpD,KAAKO,MAAMD,UAAW+C,QAAM,GAC/CZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAcU,OAAK,EAACJ,QAASlD,KAAKQ,mBAChCiC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeG,UAAU,uBAEvBN,EAAAC,EAAAC,cAAA,SAAOI,UAAU,uBAAuBlC,KAAK,UAAUoB,KAAK,OAAOsB,YAAY,UAAUC,aAAW,UAAUC,SAAUzD,KAAKU,eAC7H+B,EAAAC,EAAAC,cAAA,SAAOI,UAAU,uBAAuBlC,KAAM,QAAQoB,KAAK,OAAOsB,YAAY,QAAQC,aAAW,QAAQC,SAAUzD,KAAKU,eACxH+B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQc,SAAO,EAACZ,MAAM,QAAQa,KAAK,KAAKZ,UAAU,UAAUG,QAASlD,KAAK0B,cAA1E,eASVe,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAQC,IAAK7D,KAAKO,MAAMe,QAClBgB,SAAS,QACTwB,MAAM,OACNC,OAAO,OACPC,WAAS,EACTC,iBAAe,YA7HFC,aCSVC,mLATX,OACE1B,EAAAC,EAAAC,cAACyB,EAAA,SAAD,KAEE3B,EAAAC,EAAAC,cAAC0B,EAAD,cANwBH,aCSjBI,mLARX,OAAO7B,EAAAC,EAAAC,cAAA,WAGHF,EAAAC,EAAAC,cAAC4B,EAAD,cALUL,aCSEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,gFCRNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.09759ea4.chunk.js","sourcesContent":["import React, { Component , Fragment } from \"react\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { MDBCol, MDBFormInline, MDBBtn, MDBNavbarBrand, MDBNavbarToggler, MDBNavbar, MDBCollapse, MDBNavbarNav  , ToastContainer , toast } from \"mdbreact\";\r\nimport Axios from 'axios';\r\nimport Iframe from 'react-iframe';\r\n\r\n\r\nclass SearchPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.haddleSubmit = this.haddleSubmit.bind(this);\r\n       \r\n        this.state = {\r\n            collapsed: false,\r\n            asset : \"\",\r\n            company : \"\",\r\n            openUrl : \"https://www.rootsmulticlean.com\",\r\n            data : {\r\n                 \"\" : \"\",\r\n                 roots : {\r\n                        '' : \"https://www.rootsmulticlean.com\",\r\n                        '7 series 767' :  \"https://www.rootsmulticlean.com/high-pressure-jets/7-series-767/\",\r\n                        '6 series 650':   \"https://www.rootsmulticlean.com/high-pressure-jets/6-series-650/\"\r\n                    \r\n                    }\r\n            }\r\n          }\r\n    }\r\n\r\n\r\n    notify(type){\r\n        return () => {\r\n          switch (type) {\r\n            case 'info':\r\n              toast.info('Info message', {\r\n                autoClose: 3000\r\n              });\r\n              break;\r\n            case 'success':\r\n              toast.success('Success message', {\r\n                position: \"top-right\",\r\n              });\r\n              break;\r\n            case 'warning':\r\n              toast.warn('Warning message');\r\n              break;\r\n            case 'error':\r\n              toast.error('Error message');\r\n              break;\r\n          }\r\n        };\r\n      };\r\n\r\n\r\n\r\nhandleTogglerClick = () => {\r\n  this.setState({\r\n    collapsed: !this.state.collapsed\r\n  });\r\n}\r\n\r\nhandleNavbarClick = (e) => { \r\n  this.setState({\r\n    collapsed: false,\r\n  });\r\n}\r\n\r\nhandleChange = (e) => { \r\n    this.setState({\r\n      [e.target.name] : e.target.value.toLowerCase(),\r\n    });\r\n\r\n    Axios.get(\r\n\r\n    );\r\n  }\r\n\r\nfindData = () => {\r\n    if( typeof( this.state.data[this.state.company]) !== 'undefined'){\r\n        if(  typeof( this.state.data[this.state.company][this.state.asset]) !== 'undefined' ){\r\n        //window.open(this.state.data[this.state.company][this.state.asset], \"_blank\");\r\n        this.setState({\r\n            openUrl : this.state.data[this.state.company][this.state.asset]\r\n        })\r\n        }\r\n\r\n        else {\r\n            console.log(\"asset not found\")\r\n        }\r\n    }\r\n    else{\r\n        console.log(\" company not found\");\r\n        this.notify('warning');\r\n    }\r\n}\r\n\r\nhaddleSubmit = (e) => {\r\n    // this.setState({\r\n    //   searchData : e.target.value\r\n    // });\r\n    this.findData();\r\n  }\r\n\r\nrender() {\r\n  return (\r\n    <MDBCol md=\"12\">                   \r\n      <MDBNavbar color=\"deep-purple\" className=\"text-white darken-3\" dark expand=\"md\">\r\n        <MDBNavbarBrand>Company Assist </MDBNavbarBrand>\r\n        <MDBNavbarToggler onClick={this.handleTogglerClick} />\r\n        <Router>\r\n          <MDBCollapse isOpen={this.state.collapsed} navbar>\r\n            <MDBNavbarNav right onClick={this.handleNavbarClick}>\r\n              <MDBFormInline className=\"md-form mr-auto m-0\">\r\n              \r\n                <input className=\"form-control mr-sm-2\" name='company' type=\"text\" placeholder=\"Company\" aria-label=\"Company\" onChange={this.handleChange} />\r\n                <input className=\"form-control mr-sm-2\" name= 'asset' type=\"text\" placeholder=\"Asset\" aria-label=\"Asset\" onChange={this.handleChange} />\r\n                <MDBBtn outline color=\"white\" size=\"sm\" className=\"mr-auto\" onClick={this.haddleSubmit}>\r\n                  Search \r\n                </MDBBtn>\r\n              </MDBFormInline>\r\n            </MDBNavbarNav>\r\n          </MDBCollapse>\r\n        </Router>\r\n      </MDBNavbar>\r\n      \r\n      <Iframe url={this.state.openUrl}\r\n            position=\"fixed\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            scrolling \r\n            allowFullScreen/>\r\n    </MDBCol>\r\n    );\r\n  } \r\n}\r\n\r\nexport default SearchPage;","import React, { Component, Fragment } from 'react';\r\nimport { Button, ToastContainer, toast } from 'mdbreact';\r\nimport Search from './Search/Search';\r\n\r\nclass NotificationsPage extends Component {\r\n  \r\n  render(){\r\n    return (\r\n      <Fragment>\r\n\r\n        <Search/>\r\n\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nexport default NotificationsPage;","import React, { Component } from 'react';\nimport './App.css';\nimport Side from './components/Home';\nclass App extends Component {\n  render() {\n    return <div>\n        {/* <Message /> */}\n        {/* <NotificationsPage /> */}\n        <Side/>\n      </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import 'font-awesome/css/font-awesome.min.css';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}